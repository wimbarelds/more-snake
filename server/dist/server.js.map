{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./server/src/server.ts","webpack:///./src/game/SnakeAgent.ts","webpack:///./src/game/SnakeGame.ts","webpack:///./src/game/SnakePlayer.ts","webpack:///./src/game/SnakeRenderer.ts","webpack:///./src/game/SnakeScoreCalculator.ts","webpack:///external \"express\"","webpack:///external \"fs\"","webpack:///external \"path\"","webpack:///external \"seed-random\""],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAmE;AACnE,MAAM,IAAI,GAAG,mBAAO,CAAC,kBAAM,CAAC,CAAC;AAC7B,MAAM,EAAE,GAAG,mBAAO,CAAC,cAAI,CAAC,CAAC;AAEzB,MAAM,MAAM,GAAG,8CAAO,EAAE,CAAC;AACzB,MAAM,CAAC,GAAG,CAAC,8CAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AAEgD;AAK3E,aAAa;AACb,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,8CAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;AACpE,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,8CAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;AACxE,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,8CAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;AASzE,SAAS,iBAAiB,CAAC,SAAiB;IACxC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAAE;QACtC,OAAO,yEAAyE,CAAC;KACpF;SAAM,IAAI,SAAS,CAAC,MAAM,GAAG,EAAE,EAAE;QAC9B,OAAO,iDAAiD,CAAC;KAC5D;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,SAAS,SAAS;IACd,MAAM,mBAAmB,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAa,CAAC;IAC1F,MAAM,MAAM,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;IAClF,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,SAAS,WAAW,CAAC,SAAiB,EAAE,QAAiB,KAAK;IAC1D,IAAI,KAAK,EAAE;QACP,OAAO,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC,WAAW,EAAE,CAAC,IAAI,KAAK,CAAC;KAChG;SAAM;QACH,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,SAAS,WAAW,CAAC,CAAC;QACzE,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;KACpC;AACL,CAAC;AAED,SAAS,SAAS,CAAC,SAAiB;IAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,SAAS,WAAW,CAAC,CAAC;IACzE,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;AACvE,CAAC;AAED,SAAS,UAAU,CAAC,SAAiB,EAAE,SAAiB;IACpD,MAAM,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;IACjC,OAAO,CAAC,CAAC,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,SAAS,KAAK,SAAS,CAAC;AAC1D,CAAC;AAED,SAAS,UAAU,CAAC,SAAiB,EAAE,IAAe;IAClD,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,SAAS,EAAE,CAAC,CAAC;IAC/D,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IAChD,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC;QAAE,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACxE,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;AACtF,CAAC;AAED,SAAS,cAAc,CAAC,SAAiB;IACrC,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,SAAS,kBAAkB,CAAC,CAAC;IAChF,MAAM,UAAU,GAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC7H,OAAO,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QAC1B,UAAU,CAAC,IAAI,CAAC;YACZ,UAAU,EAAE,KAAK;YACjB,KAAK,EAAE,CAAC;YACR,YAAY,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,KAAK,EAAC,EAAE,EAAC;YAC9C,MAAM,EAAE,MAAM;SACjB,CAAC,CAAC;KACN;IACD,OAAO,UAAU,CAAC;AACtB,CAAC;AAED,SAAS,cAAc,CAAC,SAAiB,EAAE,UAAuB;IAC9D,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,SAAS,EAAE,CAAC,CAAC;IAC/D,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;IACvD,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC;QAAE,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACxE,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;AAC5F,CAAC;AAED,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACrE,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE;QACxG,GAAG,CAAC,IAAI,CAAC;YACL,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,gBAAgB;SAC5B,CAAC,CAAC;KACN;SAAM,IAAI,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;QAC9C,GAAG,CAAC,IAAI,CAAC;YACL,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;SACjD,CAAC,CAAC;KACN;SAAM;QACH,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QACtD,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,gEAAgE;QAC/I,IAAI,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE;YAC7D,GAAG,CAAC,IAAI,CAAC;gBACL,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,+DAA+D;aAC3E,CAAC,CAAC;SACN;aACI;YACD,UAAU,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC;YACvE,GAAG,CAAC,IAAI,CAAC;gBACL,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,sBAAsB;aAClC,CAAC,CAAC;SACN;KACJ;AACL,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,mBAAmB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAC/C,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;QACpC,GAAG,CAAC,IAAI,CAAC;YACL,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,sBAAsB;SAClC,CAAC,CAAC;KACN;SAAM;QACH,GAAG,CAAC,IAAI,CAAC;YACL,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC,gDAAgD;SAClI,CAAC,CAAC;KACN;AACL,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACzC,GAAG,CAAC,IAAI,CAAC;QACL,OAAO,EAAE,IAAI;QACb,IAAI,EAAE,SAAS,EAAE;KACpB,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAQH,IAAI,YAAY,GAAkB,EAAE,CAAC;AACrC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAC3C,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE;QAClC,GAAG,CAAC,IAAI,CAAC;YACL,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,kCAAkC;SAC9C,CAAC,CAAC;KACN;SAAM;QACH,0BAA0B;QAC1B,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACtE,kBAAkB;QAClB,YAAY,CAAC,IAAI,CAAC;YACd,MAAM;YACN,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,SAAS;YAC7B,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACxB,CAAC,CAAC;QACH,2BAA2B;QAC3B,GAAG,CAAC,IAAI,CAAC;YACL,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,MAAM;SACf,CAAC,CAAC;QACH,sCAAsC;QACtC,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;KAC9G;AACL,CAAC,CAAC;AAEF,2FAA2F;AAC3F,MAAM,CAAC,GAAG,CAAC,wBAAwB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACpD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;QACpC,GAAG,CAAC,IAAI,CAAC;YACL,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,sBAAsB;SAClC,CAAC,CAAC;KACN;SAAM;QACH,GAAG,CAAC,IAAI,CAAC;YACL,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;SAC7C,CAAC,CAAC;KACN;AACL,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACrD,MAAM,KAAK,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,sBAAsB;QACrE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,8BAA8B;YACrD,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,iCAAiC;gBAC3D,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,kCAAkC;oBAC7D,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,2BAA2B;wBACjD,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,mCAAmC;4BAChE,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,SAAS,KAAK,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,uCAAuC;gCAC7J,CAAC,CAAC,EAAE,CAAC;IAET,IAAI,KAAK,EAAE;QACP,GAAG,CAAC,IAAI,CAAC;YACL,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,KAAK;SACjB,CAAC,CAAC;KACN;SAAM;QACH,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,KAAK,GAAG,2FAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAClF,IAAI,KAAK,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE;YAC1B,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,GAAG,CAAC,IAAI,CAAC;gBACL,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,+BAA+B;aAC3C,CAAC,CAAC;SACN;aAAM;YACH,IAAI,UAAU,GAAG,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACtD,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,IAAI,KAAK,CAAC,EAAE;gBAC3D,GAAG,CAAC,IAAI,CAAC;oBACL,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,gDAAgD;iBAC5D,CAAC,CAAC;aACN;iBAAM;gBACH,uDAAuD;gBACvD,MAAM,gBAAgB,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,SAAS,KAAK,GAAG,CAAC,IAAI,CAAC,SAAS,IAAI,OAAO,CAAC,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC7I,YAAY,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBAEzC,UAAU,CAAC,IAAI,CAAC;oBACZ,UAAU,EAAE,GAAG,CAAC,IAAI,CAAC,UAAU;oBAC/B,KAAK,EAAE,KAAK;oBACZ,YAAY,EAAE,GAAG,CAAC,IAAI,CAAC,YAAY;oBACnC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM;iBAC1B,CAAC,CAAC;gBACH,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACtE,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBACjD,GAAG,CAAC,IAAI,CAAC;oBACL,OAAO,EAAE,IAAI;oBACb,IAAI,EAAE,UAAU;iBACnB,CAAC,CAAC;aACN;SACJ;KACJ;AACL,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACpB,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;;;;;;;;;;;;;AC9OvD;AAAA;AAAA;AAAA;AAAoE;AACpB;AAKzC,MAAM,UAAU;IAYnB,YAAmB,SAAoB,EAAE,UAAiB;QAPlD,cAAS,GAAQ,qDAAU,CAAC,IAAI,CAAC;QACjC,WAAM,GAAW,CAAC,CAAC;QACnB,mBAAc,GAAyB,EAAE,CAAC;QAC1C,kBAAa,GAAwB,EAAE,CAAC;QAK5C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,wBAAwB;QACxB,IAAI,CAAC,eAAe,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnD,IAAI,CAAC,uBAAuB,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACP,CAAC;IAED,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAED,IAAY,SAAS;QACjB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACvD,CAAC;IAED,IAAY,YAAY;QACpB,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEM,eAAe,CAAC,QAA2B;QAC9C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAED,IAAY,KAAK,CAAC,GAAW;QACzB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QAClB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEM,gBAAgB,CAAC,QAAgC;QACpD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAEM,kBAAkB,CAAC,GAAQ;QAC9B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,GAAG,KAAK,SAAS,IAAI,GAAG,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACtH,CAAC;IAEO,QAAQ;QACZ,YAAY;QACZ,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACjB,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;YACtC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;SACzC,CAAC,CAAC;QACH,sCAAsC;QACtC,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAC1C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;SACtC;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,QAAQ;QACZ,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;QAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACvI,IAAI,IAAI;YAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACzC,kGAAkG;aAC7F,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC;YAAE,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QACnF,gCAAgC;QAChC,OAAO,CAAC,IAAI,CAAC;IACjB,CAAC;IAEM,IAAI;QACP,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACpC,QAAQ,CAAC,oEAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC;IAChD,CAAC;IAEM,YAAY,CAAC,YAAiB;QACjC,iCAAiC;QACjC,IAAI,IAAI,CAAC,SAAS,KAAK,qDAAU,CAAC,IAAI,IAAI,YAAY,KAAK,qDAAU,CAAC,EAAE;YAAE,OAAO;QACjF,IAAI,IAAI,CAAC,SAAS,KAAK,qDAAU,CAAC,EAAE,IAAI,YAAY,KAAK,qDAAU,CAAC,IAAI;YAAE,OAAO;QACjF,IAAI,IAAI,CAAC,SAAS,KAAK,qDAAU,CAAC,IAAI,IAAI,YAAY,KAAK,qDAAU,CAAC,KAAK;YAAE,OAAO;QACpF,IAAI,IAAI,CAAC,SAAS,KAAK,qDAAU,CAAC,KAAK,IAAI,YAAY,KAAK,qDAAU,CAAC,IAAI;YAAE,OAAO;QACpF,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC;IAClC,CAAC;IAEM,cAAc;QACjB,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;IACpC,CAAC;CACJ;;;;;;;;;;;;;AC9GD;AAAA;AAAA;AAAA;AAAA;AAA8D;AACpB;AAE1C,MAAM,UAAU,GAAQ,mBAAO,CAAC,gCAAa,CAAC,CAAC,CAAC,kCAAkC;AAClF,MAAM,gBAAgB,GAAG,EAAE,CAAC;AAMrB,MAAM,UAAU,GAA8B;IACjD,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;IACpB,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE;IACrB,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;IACtB,KAAK,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;CACzB,CAAC;AAiBK,MAAM,SAAS;IASlB,YAAY,MAAc,EAAE,KAAY,EAAE,UAAkB;QALpD,eAAU,GAAU,EAAE,CAAC;QAM3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,CAAC,IAAI,sDAAU,CAAC,IAAI,EAAE,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACvH,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,uEAAuE;QAC7K,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAE3C,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE/E,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACvB,CAAC;IAED,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAED,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,IAAY,UAAU;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAY,EAAE,KAAiB,EAAS,EAAE;YACjE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC1C,OAAO,KAAK,CAAC;QACjB,CAAC,EAAE,EAAE,CAAC,CAAC;IACX,CAAC;IAEO,iBAAiB;QACrB,MAAM,UAAU,GAAU,EAAE,CAAC;QAC7B,+FAA+F;QAC/F,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACnD,wEAAwE;QACxE,iGAAiG;QACjG,MAAM,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,IAAI,EAAO,EAAE;YACzD,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;YAClC,OAAO,GAAG,CAAC;QACf,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,wCAAwC;QACxC,IAAI,eAAe,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;QACzC,OAAO,IAAI,EAAE;YACT,MAAM,QAAQ,GAAU,EAAE,CAAC;YAC3B,KAAK,MAAM,SAAS,IAAI,eAAe,EAAE;gBACrC,MAAM,MAAM,GAAG;oBACX,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,EAAE;oBACvC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,EAAE;oBACvC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;oBACvC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;iBAC1C,CAAC;gBACF,KAAK,MAAM,IAAI,IAAI,MAAM,EAAE;oBACvB,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC;oBAClC,IAAI,UAAU,CAAC,GAAG,CAAC;wBAAE,SAAS,CAAC,gDAAgD;oBAC/E,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,4DAA4D;oBACpF,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;wBAAE,SAAS,CAAC,iDAAiD;oBAC7F,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;wBAAE,SAAS;oBACzC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACvB;aACJ;YACD,gDAAgD;YAChD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC;gBAAE,MAAM;YACjC,uDAAuD;YACvD,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YAC5C,2BAA2B;YAC3B,eAAe,GAAG,QAAQ,CAAC;SAC9B;QACD,OAAO,UAAU,CAAC;IACtB,CAAC;IAEO,SAAS,CAAC,MAAc,CAAC,EAAE,MAAc,CAAC,EAAE,UAAmB,KAAK;QACxE,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,CAAC;QACxB,MAAM,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,KAAK,CAAC,CAAC;QAChD,OAAO,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAC/C,CAAC;IAEM,sBAAsB,CAAC,gBAAiF;QAC3G,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAiB,EAAE,UAAkB,EAAE,EAAE,CAAC,gBAAgB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;IAC3G,CAAC;IAEM,gBAAgB,CAAC,QAA2B;QAC/C,yGAAyG;QACzG,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,KAAa,EAAE,EAAE;gBAC9C,QAAQ,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAEM,SAAS;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IACxD,CAAC;IAEM,iBAAiB,CAAC,GAAQ;QAC7B,yEAAyE;QACzE,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC;QAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;QAC9D,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAClE,wEAAwE;QACxE,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACpD,IAAI,eAAe,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,eAAe,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAC5E,oDAAoD;QACpD,MAAM,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,eAAe,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrH,KAAK,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE;YACzF,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;gBAAE,OAAO,IAAI,CAAC;YACtD,IAAI,SAAS,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAC;YACpD,IAAI,SAAS,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAC;SACxD;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,eAAe,CAAC,GAAQ;QAC3B,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;YAAE,OAAO,IAAI,CAAC;QAC3B,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;YAAE,OAAO,IAAI,CAAC;QAC3B,IAAI,GAAG,CAAC,CAAC,IAAI,2DAAY;YAAE,OAAO,IAAI,CAAC;QACvC,IAAI,GAAG,CAAC,CAAC,IAAI,4DAAa;YAAE,OAAO,IAAI,CAAC;QACxC,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,kBAAkB,CAAC,GAAQ;QAC9B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;IACtE,CAAC;IAEM,SAAS,CAAC,GAAQ;QACrB,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3C,CAAC;IAEM,UAAU,CAAC,IAAY,CAAC;QAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE;YACpD,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAC;YACpH,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAC;YACpH,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,MAAM,UAAU,GAAU,EAAE,CAAC;QAE7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACxB,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC;gBAAE,MAAM;YACnC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC7D,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3B,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACzB;QAED,OAAO,UAAU,CAAC;IACtB,CAAC;IAEO,cAAc,CAAC,GAAQ;QAC3B,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACtG,CAAC;IAEM,aAAa,CAAC,GAAQ;QACzB,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QACvC,0CAA0C;QAC1C,IAAI,KAAK,KAAK,CAAC,CAAC;YAAE,OAAO,KAAK,CAAC;QAC/B,oCAAoC;QACpC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACjC,OAAO,IAAI,CAAC;QACZ,oCAAoC;IACxC,CAAC;IAEM,KAAK,CAAC,MAAc;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;IACtC,CAAC;IAEM,cAAc;QACjB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAEM,YAAY;QACf,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAEM,aAAa;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAEM,aAAa;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAEM,aAAa;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;CACJ;;;;;;;;;;;;;ACnOD;AAAA;AAAA;AAAA;AAA+E;AAU/E,MAAM,MAAM,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAEjD,MAAM,eAAe,GAAG,CAAC,GAAQ,EAAa,EAAE;IACnD,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;QAAE,OAAO,MAAM,CAAC;IAC7B,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;QAAE,OAAO,OAAO,CAAC;IAC9B,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;QAAE,OAAO,IAAI,CAAC;IAC3B,OAAO,MAAM,CAAC;AAClB,CAAC;AAaM,MAAM,WAAW;IAiBpB,YAAY,KAAiB,EAAE,WAAmB;QAV1C,cAAS,GAAW,CAAC,CAAC;QACtB,gBAAW,GAAW,CAAC,CAAC;QACxB,cAAS,GAAe,IAAI,CAAC;QAC7B,gBAAW,GAAe,IAAI,CAAC;QAE/B,yBAAoB,GAAa,EAAE,CAAC;QAG5B,iBAAY,GAAiB,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QAGnF,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC;QAC1B,IAAI,CAAC,cAAc,GAAG;YAClB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI;YACtB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM;YAC1B,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM;YAC1B,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,OAAO;SAC/B,CAAC;QAEF,oBAAoB;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAgB,EAAE,EAAE;YACrC,wCAAwC;YACxC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YAE7B,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YACjD,MAAM,YAAY,GAAG,qDAAU,CAAC,SAAS,CAAC,CAAC;YAC3C,IAAI,CAAC,YAAY;gBAAE,OAAO;YAE1B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACjB,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;gBACtC,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC;aACjC;iBAAM,IAAG,CAAC,IAAI,CAAC,WAAW,EAAE;gBACzB,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC;aACnC;QAEL,CAAC,CAAC;QACF,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IAEM,OAAO;QACV,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACnC,CAAC;IAEO,IAAI;QACR,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,EAAE,iBAAiB;YACtC,8BAA8B;YAC9B,IAAI,IAAI,CAAC,SAAS;gBAAE,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC5F,wBAAwB;YACxB,IAAI,CAAC,SAAS,EAAE;YAChB,qBAAqB;YACrB,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAExB,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC;gBAClC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC1C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;aAC3B;iBAAM;gBACH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACzB;SACJ;aAAM,EAAE,gBAAgB;YACrB,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;IACL,CAAC;IAEO,gBAAgB;QACpB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,YAAY,CAAsB,CAAC,CAAC,2EAA2E;IAC5K,CAAC;IAED,IAAY,YAAY;QACpB,MAAM,KAAK,GAAG,CAAC,GAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;QAC5D,MAAM,KAAK,GAAG,CAAC,GAAC,CAAC,CAAC,CAAC,GAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QACjC,MAAM,KAAK,GAAG,CAAC,KAAK,GAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QAChC,MAAM,KAAK,GAAG,KAAK,GAAG,WAAW,CAAC,mBAAmB,GAAG,CAAC,WAAW,CAAC,kBAAkB,GAAG,WAAW,CAAC,mBAAmB,CAAC,CAAC;QAC3H,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,YAAY,CAAC,OAAe;QAChC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE;YACrD,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAC1C;QACD,8BAA8B;QAC9B,IAAI,IAAI,CAAC,oBAAoB,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE;YAC9H,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;SAC/B;IACL,CAAC;IAEO,QAAQ;QACZ,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1D,CAAC;IAEO,UAAU;QACd,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAC7D,CAAC;;AAtGsB,8BAAkB,GAAW,GAAG,CAAC;AACjC,+BAAmB,GAAW,GAAG,CAAC;;;;;;;;;;;;;AC7B7D;AAAA;AAAA;AAAA;AAAO,MAAM,YAAY,GAAG,IAAI,CAAC;AAC1B,MAAM,aAAa,GAAG,GAAG,CAAC;AAS1B,MAAM,aAAa;IAQtB,YAAY,IAAe,EAAE,KAAY,EAAE,OAAiC;QAFpE,mBAAc,GAAW,CAAC,CAAC;QAG/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC;QAEnB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CACnC,IAAI,CAAC,YAAY,EAAE,EACnB,KAAK,CAAC,SAAS,CAClB,CAAC;QACF,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,gBAAgB,CACpC,IAAI,CAAC,aAAa,EAAE,EACpB,KAAK,CAAC,UAAU,CACnB,CAAC;QAEF,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAEM,IAAI;QACP,mBAAmB;QACnB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;QACtD,aAAa;QACb,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;QACxE,aAAa;QACb,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;QACvE,aAAa;QACb,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC1E,aAAa;QACb,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,KAAiB,EAAE,UAAkB,EAAE,EAAE;YACpE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;QACjF,CAAC,CAAC,CAAC;QACH,uCAAuC;QACvC,IAAI,CAAC,cAAc,GAAG,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACtE,CAAC;IAEM,OAAO;QACV,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,oBAAoB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9C,CAAC;IAEO,YAAY;QAChB,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,CAAC,KAAK,GAAG,YAAY,CAAC;QAC5B,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC;QAC9B,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,gBAAgB,CAAC,KAAY,EAAE,KAAa;QAChD,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACnC,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAA6B,CAAC;QAChE,GAAG,CAAC,SAAS,EAAE,CAAC;QAChB,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC;QACtB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACtB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SACpC;QACD,GAAG,CAAC,IAAI,EAAE,CAAC;QACX,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,kBAAkB,CAAC,KAAY,EAAE,KAAa;QAClD,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;QACrB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACtB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SACzC;QACD,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IACpB,CAAC;CACJ;;;;;;;;;;;;;ACtFD;AAAA;AAAA;AAAsE;AAE/D,SAAS,oBAAoB,CAAC,MAAc,EAAE,KAAY,EAAE,YAA0B;IACzF,MAAM,IAAI,GAAG,IAAI,oDAAS,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IAC7C,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAClC,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrB,OAAM,CAAC,QAAQ,EAAE;QACb,MAAM,KAAK,GAAqB,CAAC,YAAY,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;YACvE,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;gBACjD,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;oBACjD,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QAE/D,IAAI,KAAK;YAAE,KAAK,CAAC,YAAY,CAAC,qDAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACjD,QAAQ,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QACzB,IAAI,EAAE,CAAC;KACV;IACD,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;AAC5B,CAAC;;;;;;;;;;;;ACnBD,oC;;;;;;;;;;;ACAA,+B;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,wC","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./server/src/server.ts\");\n","import express, { Request, Response, NextFunction } from 'express';\r\nconst path = require('path');\r\nconst fs = require('fs');\r\n\r\nconst server = express();\r\nserver.use(express.json());\r\n\r\nimport { SnakeScoreCalculator } from '../../src/game/SnakeScoreCalculator';\r\nimport { Highscore } from '../../src/game/SnakePlayer';\r\nimport { Pos } from '../../src/game/SnakeGame';\r\n\r\n\r\n// all routes\r\nserver.use('/', express.static(path.join(__dirname, '../../dist')));\r\nserver.use('/edit', express.static(path.join(__dirname, '../../dist')));\r\nserver.use('/about', express.static(path.join(__dirname, '../../dist')));\r\n\r\ninterface GameLevel {\r\n    levelName: string;\r\n    sessionId?: string;\r\n    snakeTiles: Pos[][];\r\n    wallTiles: Pos[];\r\n}\r\n\r\nfunction getLevelNameError(levelName: string): string | false {\r\n    if (!levelName.match(/^[a-zA-Z0-9-_]+$/)) {\r\n        return 'Allowed characters for level name are a-z, 0-9, - and _ (max-length 16)';\r\n    } else if (levelName.length > 16) {\r\n        return 'Level name may not be longer than 16 characters';\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction getLevels() {\r\n    const allDirectoryContent = fs.readdirSync(path.join(__dirname, '../levels')) as string[];\r\n    const levels = allDirectoryContent.filter((result) => !getLevelNameError(result));\r\n    return levels;\r\n}\r\n\r\nfunction levelExists(levelName: string, loose: boolean = false): false | string {\r\n    if (loose) {\r\n        return getLevels().find((level) => level.toLowerCase() === levelName.toLowerCase()) || false;\r\n    } else {\r\n        const fullpath = path.join(__dirname, `../levels/${levelName}/map.json`);\r\n        return (fs.existsSync(fullpath));\r\n    }\r\n}\r\n\r\nfunction loadLevel(levelName: string): GameLevel {\r\n    const fullpath = path.join(__dirname, `../levels/${levelName}/map.json`);\r\n    return JSON.parse(fs.readFileSync(fullpath, { encoding: 'utf8' }));\r\n}\r\n\r\nfunction levelOwned(levelName: string, sessionId: string): boolean {\r\n    const map = loadLevel(levelName);\r\n    return !!map.sessionId && map.sessionId === sessionId;\r\n}\r\n\r\nfunction writeLevel(levelName: string, data: GameLevel) {\r\n    const dirPath = path.join(__dirname, `../levels/${levelName}`);\r\n    const fullpath = path.join(dirPath, 'map.json');\r\n    if (!fs.existsSync(dirPath)) fs.mkdirSync(dirPath, { recursive: true });\r\n    fs.writeFileSync(fullpath, JSON.stringify(data), { encoding: 'utf8', flag: 'w' });\r\n}\r\n\r\nfunction loadHighscores(levelName: string) {\r\n    const fullpath = path.join(__dirname, `../levels/${levelName}/highscores.json`);\r\n    const highscores: Highscore[] = (fs.existsSync(fullpath)) ? JSON.parse(fs.readFileSync(fullpath, { encoding: 'utf8' })) : [];\r\n    while (highscores.length < 5) {\r\n        highscores.push({\r\n            playerName: 'N/A',\r\n            score: 0,\r\n            inputHistory: {UP:[],DOWN:[],LEFT:[],RIGHT:[]},\r\n            playId: 'null',\r\n        });\r\n    }\r\n    return highscores;\r\n}\r\n\r\nfunction saveHighscores(levelName: string, highscores: Highscore[]) {\r\n    const dirPath = path.join(__dirname, `../levels/${levelName}`);\r\n    const fullpath = path.join(dirPath, 'highscores.json');\r\n    if (!fs.existsSync(dirPath)) fs.mkdirSync(dirPath, { recursive: true });\r\n    fs.writeFileSync(fullpath, JSON.stringify(highscores), { encoding: 'utf8', flag: 'w' });\r\n}\r\n\r\nserver.post('/save', (req: Request, res: Response, next: NextFunction) => {\r\n    if (!req.body || !req.body.levelName || !req.body.sessionId || !req.body.snakeTiles || !req.body.wallTiles) {\r\n        res.send({\r\n            success: false,\r\n            message: 'Malformed data',\r\n        });\r\n    } else if (getLevelNameError(req.body.levelName)) {\r\n        res.send({\r\n            success: false,\r\n            message: getLevelNameError(req.body.levelName), // calling this function twice is a little ugly, but its a fast small function\r\n        });\r\n    } else {\r\n        const { sessionId, snakeTiles, wallTiles } = req.body;\r\n        const levelName = levelExists(req.body.levelName, true) || req.body.levelName; // this is for case-insensitive checking, a little ugly actually\r\n        if (levelExists(levelName) && !levelOwned(levelName, sessionId)) {\r\n            res.send({\r\n                success: false,\r\n                message: 'You do not have ownership of that level (name already in use)',\r\n            });\r\n        }\r\n        else {\r\n            writeLevel(levelName, { levelName, sessionId, snakeTiles, wallTiles });\r\n            res.send({\r\n                success: true,\r\n                message: 'Level has been saved',\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\nserver.get('/level/:levelName', (req, res, next) => {\r\n    if (!levelExists(req.params.levelName)) {\r\n        res.send({\r\n            success: false,\r\n            message: 'Level does not exist',\r\n        });\r\n    } else {\r\n        res.send({\r\n            success: true,\r\n            data: Object.assign(loadLevel(req.params.levelName), { sessionId: undefined }) // this will remove sessionid from returned data\r\n        });\r\n    }\r\n});\r\n\r\nserver.get('/level-list', (req, res, next) => {\r\n    res.send({\r\n        success: true,\r\n        data: getLevels(),\r\n    });\r\n});\r\n\r\ninterface PlaySession {\r\n    playId: string;\r\n    sessionId: string;\r\n    timestamp: number;\r\n}\r\n\r\nlet playSessions: PlaySession[] = [];\r\nserver.post('/get-play-id', (req, res, next) => {\r\n    if (!req.body || !req.body.sessionId) {\r\n        res.send({\r\n            success: false,\r\n            message: 'No session ID found in post-data',\r\n        });\r\n    } else {\r\n        // Generate random play-ID\r\n        const playId = (Math.random() * Number.MAX_SAFE_INTEGER).toString(32);\r\n        // Add playsession\r\n        playSessions.push({\r\n            playId,\r\n            sessionId: req.body.sessionId,\r\n            timestamp: Date.now(),\r\n        });\r\n        // Send playId back to user\r\n        res.send({\r\n            success: true,\r\n            data: playId,\r\n        });\r\n        // Remove sessions older than 12 hours\r\n        playSessions = playSessions.filter((session) => session.timestamp >= (Date.now() - (24 * 60 * 60 * 1000)));\r\n    }\r\n})\r\n\r\n// submit highscore = map, playername, playid, score, input{UP:[],DOWN:[],LEFT:[],RIGHT:[]}\r\nserver.get('/highscores/:levelName', (req, res, next) => {\r\n    if (!levelExists(req.params.levelName)) {\r\n        res.send({\r\n            success: false,\r\n            message: 'Level does not exist',\r\n        });\r\n    } else {\r\n        res.send({\r\n            success: true,\r\n            data: loadHighscores(req.params.levelName),\r\n        });\r\n    }\r\n});\r\n\r\nserver.post('/highscores/:levelName', (req, res, next) => {\r\n    const error = !levelExists(req.params.levelName) ? 'Level does not exist'\r\n        : (!req.body.playId) ? 'Postdata is missing a playId'\r\n        : (!req.body.sessionId) ? 'Postdata is missing a sessionId'\r\n        : (!req.body.playerName) ? 'Postdata is missing a playerName'\r\n        : (!req.body.score) ? 'Postdata is missing score'\r\n        : (!req.body.inputHistory) ? 'Postdata is missing input-history'\r\n        : !playSessions.some((session) => (session.playId === req.body.playId && session.sessionId === req.body.sessionId)) ? 'Could not find playsession registered'\r\n        : '';\r\n\r\n    if (error) {\r\n        res.send({\r\n            success: false,\r\n            message: error,\r\n        });\r\n    } else {\r\n        const level = loadLevel(req.params.levelName);\r\n        const score = SnakeScoreCalculator(req.body.playId, level, req.body.inputHistory);\r\n        if (score !== req.body.score) {\r\n            console.log(score, req.body.score);\r\n            res.send({\r\n                success: false,\r\n                message: 'Could not validate your score',\r\n            });\r\n        } else {\r\n            let highscores = loadHighscores(req.params.levelName);\r\n            if (highscores.every((highscore) => highscore.score >= score)) {\r\n                res.send({\r\n                    success: false,\r\n                    message: `Your score isn't high enough to be a highscore`,\r\n                });\r\n            } else {\r\n                // Clear the playsession to avoid duplicate submissions\r\n                const playSessionIndex = playSessions.findIndex((session) => session.sessionId === req.body.sessionId && session.playId === req.body.playId);\r\n                playSessions.splice(playSessionIndex, 1);\r\n\r\n                highscores.push({\r\n                    playerName: req.body.playerName,\r\n                    score: score,\r\n                    inputHistory: req.body.inputHistory,\r\n                    playId: req.body.playId,\r\n                });\r\n                highscores = highscores.sort((a, b) => b.score - a.score).slice(0, 5);\r\n                saveHighscores(req.params.levelName, highscores);\r\n                res.send({\r\n                    success: true,\r\n                    data: highscores,\r\n                });\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nserver.listen(8008);\r\nconsole.log('Server listening http://localhost:8008/');\r\n","import { Pos, DIRECTIONS, SnakeGame, Direction } from './SnakeGame';\r\nimport { getDirectionKey } from './SnakePlayer';\r\n\r\ntype AgentScoreCallback = (score: number) => any;\r\ntype AgentMoveCallback = (direction: Direction) => any;\r\n\r\nexport class SnakeAgent {\r\n    // score\r\n    // direction\r\n    private snakeGame: SnakeGame;\r\n    private snakeTiles: Pos[];\r\n    private direction: Pos = DIRECTIONS.DOWN;\r\n    private _score: number = 0;\r\n    private scoreCallbacks: AgentScoreCallback[] = [];\r\n    private moveCallbacks: AgentMoveCallback[] = [];\r\n    private gameoverPromise: Promise<number>;\r\n    private gameoverPromiseResolver!: () => void;\r\n\r\n    public constructor(snakeGame: SnakeGame, snakeTiles: Pos[]) {\r\n        this.snakeGame = snakeGame;\r\n        this.snakeTiles = snakeTiles;\r\n\r\n        // Add game-over promise\r\n        this.gameoverPromise = new Promise((resolve, reject) => {\r\n            this.gameoverPromiseResolver = () => resolve(this.score);\r\n        });\r\n    }\r\n\r\n    public get gameover(): Promise<number> {\r\n        return this.gameoverPromise;\r\n    }\r\n\r\n    private get snakeHead(): Pos {\r\n        return this.snakeTiles[this.snakeTiles.length - 1];\r\n    }\r\n\r\n    private get snakeTailEnd(): Pos {\r\n        return this.snakeTiles[0];\r\n    }\r\n\r\n    public getTiles(): Pos[] {\r\n        return this.snakeTiles;\r\n    }\r\n\r\n    public getScore(): number {\r\n        return this._score;\r\n    }\r\n\r\n    public addMoveListener(callback: AgentMoveCallback): void {\r\n        this.moveCallbacks.push(callback);\r\n    }\r\n\r\n    private set score(val: number) {\r\n        this._score = val;\r\n        this.scoreCallbacks.forEach((callback) => callback(val));\r\n    }\r\n\r\n    public addScoreListener(callback: (score: number) => any) {\r\n        this.scoreCallbacks.push(callback);\r\n    }\r\n\r\n    public isSnakeCollisionAt(pos: Pos) {\r\n        return this.snakeTiles.some((snakeTile) => (pos !== snakeTile && pos.x === snakeTile.x && pos.y === snakeTile.y));\r\n    }\r\n\r\n    private moveHead(): false | Pos[] {\r\n        // Move head\r\n        this.snakeTiles.push({\r\n            x: this.snakeHead.x + this.direction.x,\r\n            y: this.snakeHead.y + this.direction.y,\r\n        });\r\n        // Check if we need to increment score\r\n        if (this.snakeGame.isCandyAt(this.snakeHead)) {\r\n            this.score = this._score + 1;\r\n            return this.snakeGame.placeCandy();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private moveTail(): boolean {\r\n        const head = this.snakeHead;\r\n        const dead = this.snakeGame.isSnakeCollisionAt(head) || this.snakeGame.isOutOfBoundsAt(head) || this.snakeGame.isWallCollisionAt(head);\r\n        if (dead) this.gameoverPromiseResolver();\r\n        // Only remove the last tail bit if we didn't hit a candy (effectively keeping our snake's length)\r\n        else if (!this.snakeGame.removeCandyAt(this.snakeTailEnd)) this.snakeTiles.shift();\r\n        // Return whether or not we died\r\n        return !dead;\r\n    }\r\n\r\n    public tick(): boolean | Pos[] {\r\n        const candyPlaced = this.moveHead();\r\n        const alive = this.moveTail();\r\n        this.moveCallbacks.forEach((callback) => {\r\n            callback(getDirectionKey(this.direction));\r\n        });\r\n        return !alive ? false : candyPlaced || true;\r\n    }\r\n\r\n    public setDirection(newDirection: Pos) {\r\n        // Don't allow direction reversal\r\n        if (this.direction === DIRECTIONS.DOWN && newDirection === DIRECTIONS.UP) return;\r\n        if (this.direction === DIRECTIONS.UP && newDirection === DIRECTIONS.DOWN) return;\r\n        if (this.direction === DIRECTIONS.LEFT && newDirection === DIRECTIONS.RIGHT) return;\r\n        if (this.direction === DIRECTIONS.RIGHT && newDirection === DIRECTIONS.LEFT) return;\r\n        this.direction = newDirection;\r\n    }\r\n\r\n    public activateCheats(): void {\r\n        this.snakeGame.activateCheats();\r\n    }\r\n}","import { CANVAS_WIDTH, CANVAS_HEIGHT } from './SnakeRenderer';\r\nimport { SnakeAgent } from './SnakeAgent';\r\n\r\nconst seedRandom: any = require('seed-random'); // For repeatable candy placements\r\nconst NUM_CANDY_ON_MAP = 25;\r\n\r\ntype GameScoreCallback = ({ playerIndex, score}: { playerIndex: number, score: number }) => any;\r\n\r\nexport type Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';\r\n\r\nexport const DIRECTIONS: { [d in Direction]: Pos } = {\r\n    UP: { x: 0, y: -10 },\r\n    DOWN: { x: 0, y: 10 },\r\n    LEFT: { x: -10, y: 0 },\r\n    RIGHT: { x: 10, y: 0 }\r\n};\r\n\r\nexport interface Pos {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface Level {\r\n    levelName: String;\r\n    snakeTiles: Pos[][];\r\n    wallTiles: Pos[];\r\n}\r\n\r\nexport interface SnakeAgentController {\r\n    destroy(): void;\r\n}\r\n\r\nexport class SnakeGame {\r\n    private level: Level;\r\n    private wallTiles: Pos[];\r\n    private floorTiles: Pos[];\r\n    private candyTiles: Pos[] = [];\r\n    private randomizer!: () => number;\r\n    private agents: SnakeAgent[];\r\n    private gameoverPromise: Promise<number[]>;\r\n\r\n    constructor(playId: string, level: Level, numPlayers: number) {\r\n        this.level = level;\r\n        this.agents = new Array(numPlayers).fill(0).map((x, agentIndex) => new SnakeAgent(this, level.snakeTiles[agentIndex]));\r\n        this.wallTiles = level.wallTiles.slice().sort((a, b) => ((a.x === b.x) ? (a.y - b.y) : (a.x - b.x))); // if we sort our wall tiles we search for collision checks much faster\r\n        this.floorTiles = this.computeFloorTiles();\r\n        \r\n        this.gameoverPromise = Promise.all(this.agents.map((agent) => agent.gameover));\r\n\r\n        this.reset(playId);\r\n    }\r\n\r\n    public get gameover(): Promise<number[]> {\r\n        return this.gameoverPromise;\r\n    }\r\n\r\n    public get snakeAgents(): SnakeAgent[] {\r\n        return this.agents;\r\n    }\r\n\r\n    private get snakeTiles() {\r\n        return this.agents.reduce((tiles: Pos[], agent: SnakeAgent): Pos[] => {\r\n            tiles.push.apply(tiles, agent.getTiles());\r\n            return tiles;\r\n        }, []);\r\n    }\r\n\r\n    private computeFloorTiles(): Pos[] {\r\n        const floorTiles: Pos[] = [];\r\n        // First copy our snake tiles as floor tiles as the snake must always start on valid floortiles\r\n        floorTiles.push.apply(floorTiles, this.snakeTiles);\r\n        // Then expand outwards from there in all directions until a wall is hit\r\n        // Create a map in which we record which tiles have been scanned, so we don't scan anything twice\r\n        const scannedMap = floorTiles.reduce((acc: any, curr): any => {\r\n            acc[`${curr.x}.${curr.y}`] = true;\r\n            return acc;\r\n        }, {});\r\n\r\n        // Create a list of tiles to search from\r\n        let searchFromTiles = floorTiles.slice();\r\n        while (true) {\r\n            const newTiles: Pos[] = [];\r\n            for (const floorTile of searchFromTiles) {\r\n                const search = [\r\n                    { x: floorTile.x - 10, y: floorTile.y },\r\n                    { x: floorTile.x + 10, y: floorTile.y },\r\n                    { x: floorTile.x, y: floorTile.y - 10 },\r\n                    { x: floorTile.x, y: floorTile.y + 10 },\r\n                ];\r\n                for (const tile of search) {\r\n                    const key = `${tile.x}.${tile.y}`;\r\n                    if (scannedMap[key]) continue; // If we've already scanned this tile, ignore it\r\n                    scannedMap[key] = true; // Otherwise we're scanning it now, so adding it to the list\r\n                    if (this.isWallCollisionAt(tile)) continue; // If there is a wall here, it's not a floor tile\r\n                    if (this.isOutOfBoundsAt(tile)) continue;\r\n                    newTiles.push(tile);\r\n                }\r\n            }\r\n            // If we haven't found any new tiles, we're done\r\n            if (newTiles.length === 0) break;\r\n            // Add all the newly found tiles to the floorTiles list\r\n            floorTiles.push.apply(floorTiles, newTiles);\r\n            // Then search from the new\r\n            searchFromTiles = newTiles;\r\n        }\r\n        return floorTiles;\r\n    }\r\n\r\n    private getRandom(min: number = 0, max: number = 1, floored: boolean = false) {\r\n        const delta = max - min;\r\n        const value = min + (this.randomizer() * delta);\r\n        return floored ? Math.floor(value) : value;\r\n    }\r\n\r\n    public assignAgentControllers(creationCallback: (agent: SnakeAgent, agentIndex: number) => SnakeAgentController) {\r\n        return this.agents.map((agent: SnakeAgent, agentIndex: number) => creationCallback(agent, agentIndex));\r\n    }\r\n\r\n    public addScoreListener(listener: GameScoreCallback) {\r\n        // Add listeners to all agents and update our listeners whenever one of our agents reports a score change\r\n        for (let i = 0; i < this.agents.length; i++) {\r\n            this.agents[i].addScoreListener((score: number) => {\r\n                listener({ playerIndex: i, score });\r\n            });\r\n        }\r\n    }\r\n\r\n    public getScores(): number[] {\r\n        return this.agents.map((agent) => agent.getScore());\r\n    }\r\n\r\n    public isWallCollisionAt(pos: Pos): boolean {\r\n        // Determine an initial search point based on the x point of the position\r\n        const xMin = this.wallTiles[0].x;\r\n        const xMax = this.wallTiles[this.wallTiles.length - 1].x;\r\n        const xDelta = xMax - xMin;\r\n        const pct = Math.min(1, Math.max(0, (pos.x - xMin) / xDelta));\r\n        const searchStart = Math.floor(pct * (this.wallTiles.length - 1));\r\n        // Make sure our search start point isn't the position we're looking for\r\n        const searchStartTile = this.wallTiles[searchStart];\r\n        if (searchStartTile.x === pos.x && searchStartTile.y === pos.y) return true;\r\n        // Determine which direction we should be looking in\r\n        const direction = (pos.x > searchStartTile.x || (pos.x === searchStartTile.x && pos.y > searchStartTile.y)) ? 1 : -1;\r\n        for (let i = (searchStart + direction); i < this.wallTiles.length && i >= 0; i += direction) {\r\n            const tile = this.wallTiles[i];\r\n            if (tile.x === pos.x && tile.y === pos.y) return true;\r\n            if (direction === 1 && tile.x > pos.x) return false;\r\n            if (direction === -1 && tile.x < pos.x) return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public isOutOfBoundsAt(pos: Pos): boolean {\r\n        if (pos.x < 0) return true;\r\n        if (pos.y < 0) return true;\r\n        if (pos.x >= CANVAS_WIDTH) return true;\r\n        if (pos.y >= CANVAS_HEIGHT) return true;\r\n        return false;\r\n    }\r\n\r\n    public isSnakeCollisionAt(pos: Pos) {\r\n        return this.agents.some((agent) => agent.isSnakeCollisionAt(pos));\r\n    }\r\n\r\n    public isCandyAt(pos: Pos) {\r\n        return this.indexOfCandyAt(pos) !== -1;\r\n    }\r\n\r\n    public placeCandy(n: number = 1): Pos[] {\r\n        const validTiles = this.floorTiles.filter((floorTile) => {\r\n            if (this.snakeTiles.some((snakeTile) => (snakeTile.x === floorTile.x && snakeTile.y === floorTile.y))) return false;\r\n            if (this.candyTiles.some((candyTile) => (candyTile.x === floorTile.x && candyTile.y === floorTile.y))) return false;\r\n            return true;\r\n        });\r\n\r\n        const placements: Pos[] = [];\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            if (validTiles.length === 0) break;\r\n            const tileIndex = this.getRandom(0, validTiles.length, true);\r\n            const tile = validTiles.splice(tileIndex, 1)[0];\r\n            this.candyTiles.push(tile);\r\n            placements.push(tile);\r\n        }\r\n\r\n        return placements;\r\n    }\r\n\r\n    private indexOfCandyAt(pos: Pos): number {\r\n        return this.candyTiles.findIndex((candyTile) => (candyTile.x === pos.x && candyTile.y === pos.y));\r\n    }\r\n\r\n    public removeCandyAt(pos: Pos): boolean {\r\n        const index = this.indexOfCandyAt(pos);\r\n        // If there is no candy here, return false\r\n        if (index === -1) return false;\r\n        // If there is candy here, remove it\r\n        this.candyTiles.splice(index, 1);\r\n        return true;\r\n        // TODO: Announce a candy is removed\r\n    }\r\n\r\n    public reset(playId: string): void {\r\n        this.randomizer = seedRandom(playId);\r\n        this.candyTiles = [];\r\n        this.placeCandy(NUM_CANDY_ON_MAP);\r\n    }\r\n\r\n    public activateCheats(): void {\r\n        this.placeCandy(250);\r\n    }\r\n\r\n    public getWallTiles(): Pos[] {\r\n        return this.wallTiles;\r\n    }\r\n\r\n    public getFloorTiles(): Pos[] {\r\n        return this.floorTiles;\r\n    }\r\n\r\n    public getCandyTiles(): Pos[] {\r\n        return this.candyTiles;\r\n    }\r\n\r\n    public getSnakeTiles(): Pos[] {\r\n        return this.snakeTiles;\r\n    }\r\n}\r\n","import { DIRECTIONS, Pos, Direction, SnakeAgentController } from './SnakeGame';\r\nimport { SnakeAgent } from './SnakeAgent';\r\n\r\nexport type KeyMap = {\r\n    [d in Direction]: number;\r\n};\r\ntype ReverseKeyMap = {\r\n    [n: number]: Direction;\r\n};\r\n\r\nconst KONAMI = [38, 38, 40, 40, 37, 39, 37, 39, 66, 65];\r\n\r\nexport const getDirectionKey = (pos: Pos): Direction => {\r\n    if (pos.x < 0) return 'LEFT';\r\n    if (pos.x > 0) return 'RIGHT';\r\n    if (pos.y < 0) return 'UP';\r\n    return 'DOWN';\r\n}\r\n\r\nexport type InputHistory = {\r\n    [d in Direction]: number[];\r\n}\r\n\r\nexport interface Highscore {\r\n    playerName: string;\r\n    score: number;\r\n    inputHistory: InputHistory;\r\n    playId: string;\r\n}\r\n\r\nexport class SnakePlayer implements SnakeAgentController {\r\n    public static readonly TICK_INTERVAL_BASE: number = 150;\r\n    public static readonly TICK_INTERVAL_RANGE: number = 130;\r\n\r\n    private readonly KEYMAP: KeyMap;\r\n    private readonly REVERSE_KEYMAP: ReverseKeyMap;\r\n\r\n    private tickCount: number = 0;\r\n    private tickTimeout: number = 0;\r\n    private tickInput: Pos | null = null;\r\n    private queuedInput: Pos | null = null;\r\n    private agent: SnakeAgent;\r\n    private KONAMIKeyCodeHistory: number[] = [];\r\n    \r\n    private inputHandler: (e: KeyboardEvent) => void;\r\n    public readonly inputHistory: InputHistory = { UP: [], DOWN: [], LEFT: [], RIGHT: [] };\r\n\r\n    constructor(agent: SnakeAgent, keyBindings: KeyMap) {\r\n        this.KEYMAP = keyBindings;\r\n        this.REVERSE_KEYMAP = {\r\n            [this.KEYMAP.UP]: 'UP',\r\n            [this.KEYMAP.DOWN]: 'DOWN',\r\n            [this.KEYMAP.LEFT]: 'LEFT',\r\n            [this.KEYMAP.RIGHT]: 'RIGHT',\r\n        };\r\n\r\n        // Add input handler\r\n        this.agent = agent;\r\n        this.inputHandler = (e: KeyboardEvent) => {\r\n            // Only handle Konami input for 1 player\r\n            this.konamiLogger(e.keyCode);\r\n\r\n            const direction = this.REVERSE_KEYMAP[e.keyCode];\r\n            const newDirection = DIRECTIONS[direction];\r\n            if (!newDirection) return;\r\n\r\n            if (!this.tickInput) {\r\n                this.agent.setDirection(newDirection);\r\n                this.tickInput = newDirection;\r\n            } else if(!this.queuedInput) {\r\n                this.queuedInput = newDirection;\r\n            }\r\n\r\n        };\r\n        this.bindKeys();\r\n        this.scheduleNextTick();\r\n    }\r\n\r\n    public destroy() {\r\n        this.unbindKeys();\r\n        clearTimeout(this.tickTimeout);\r\n    }\r\n\r\n    private tick() {\r\n        if (this.agent.tick()) { // agent is alive\r\n            // Add input history if needed\r\n            if (this.tickInput) this.inputHistory[getDirectionKey(this.tickInput)].push(this.tickCount);\r\n            // Increment tickCounter\r\n            this.tickCount++\r\n            // Schedule next tick\r\n            this.scheduleNextTick();\r\n\r\n            if (this.queuedInput) {\r\n                this.tickInput = this.queuedInput;\r\n                this.agent.setDirection(this.queuedInput);\r\n                this.queuedInput = null;\r\n            } else {\r\n                this.tickInput = null;\r\n            }\r\n        } else { // agent is dead\r\n            this.destroy();\r\n        }\r\n    }\r\n\r\n    private scheduleNextTick() {\r\n        this.tickTimeout = setTimeout(this.tick.bind(this), this.tickInterval) as unknown as number; // in node this is of 'Timeout' type, but we don't care and can ignore this\r\n    }\r\n\r\n    private get tickInterval(): number {\r\n        const calc1 = 1/(Math.pow(this.agent.getScore() + 10, 0.1));\r\n        const calc2 = 1-((1- calc1) * 2);\r\n        const calc3 = (calc2-0.2) * 2.5;\r\n        const calc4 = calc3 * SnakePlayer.TICK_INTERVAL_RANGE + (SnakePlayer.TICK_INTERVAL_BASE - SnakePlayer.TICK_INTERVAL_RANGE);\r\n        return calc4;\r\n    }\r\n\r\n    private konamiLogger(keyCode: number) {\r\n        this.KONAMIKeyCodeHistory.push(keyCode);\r\n        while (this.KONAMIKeyCodeHistory.length > KONAMI.length) {\r\n            this.KONAMIKeyCodeHistory.splice(0, 1);\r\n        }\r\n        // Check for KONAMI code match\r\n        if (this.KONAMIKeyCodeHistory.length === KONAMI.length && this.KONAMIKeyCodeHistory.every((key, index) => KONAMI[index] === key)) {\r\n            this.agent.activateCheats();\r\n        }\r\n    }\r\n\r\n    private bindKeys() {\r\n        window.addEventListener('keydown', this.inputHandler);\r\n    }\r\n\r\n    private unbindKeys() {\r\n        window.removeEventListener('keydown', this.inputHandler);\r\n    }\r\n}\r\n","import { SnakeGame, Pos } from './SnakeGame';\r\nimport { SnakeAgent } from './SnakeAgent';\r\n\r\nexport const CANVAS_WIDTH = 1280;\r\nexport const CANVAS_HEIGHT = 640;\r\n\r\nexport interface Theme {\r\n    wallColor: string;\r\n    snakeColor: string[];\r\n    floorColor: string;\r\n    candyColor: string;\r\n}\r\n\r\nexport class SnakeRenderer {\r\n    private game: SnakeGame;\r\n    private theme: Theme;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private wallCanvas: HTMLCanvasElement;\r\n    private floorCanvas!: HTMLCanvasElement;\r\n    private animationFrame: number = 0;\r\n\r\n    constructor(game: SnakeGame, theme: Theme, context: CanvasRenderingContext2D) {\r\n        this.game = game;\r\n        this.theme = theme;\r\n        this.ctx = context;\r\n\r\n        this.wallCanvas = this.drawStaticCanvas(\r\n            game.getWallTiles(),\r\n            theme.wallColor,\r\n        );\r\n        this.floorCanvas = this.drawStaticCanvas(\r\n            game.getFloorTiles(),\r\n            theme.floorColor,\r\n        );\r\n\r\n        this.draw();\r\n    }\r\n\r\n    public draw() {\r\n        // Clear the screen\r\n        this.ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n        // Draw Floor\r\n        this.ctx.drawImage(this.floorCanvas, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n        // Draw Walls\r\n        this.ctx.drawImage(this.wallCanvas, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n        // Draw Candy\r\n        this.drawTilesOnContext(this.game.getCandyTiles(), this.theme.candyColor);\r\n        // Draw Snake\r\n        this.game.snakeAgents.forEach((agent: SnakeAgent, agentIndex: number) => {\r\n            this.drawTilesOnContext(agent.getTiles(), this.theme.snakeColor[agentIndex]);\r\n        });\r\n        // Draw the next frame when we're ready\r\n        this.animationFrame = requestAnimationFrame(this.draw.bind(this));\r\n    }\r\n\r\n    public destroy() {\r\n        this.draw();\r\n        cancelAnimationFrame(this.animationFrame);\r\n    }\r\n\r\n    private createCanvas(): HTMLCanvasElement {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = CANVAS_WIDTH;\r\n        canvas.height = CANVAS_HEIGHT;\r\n        return canvas;\r\n    }\r\n\r\n    private drawStaticCanvas(tiles: Pos[], color: string) {\r\n        const canvas = this.createCanvas();\r\n        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        ctx.beginPath();\r\n        ctx.fillStyle = color;\r\n        for (const tile of tiles) {\r\n            ctx.rect(tile.x, tile.y, 10, 10);\r\n        }\r\n        ctx.fill();\r\n        return canvas;\r\n    }\r\n\r\n    private drawTilesOnContext(tiles: Pos[], color: string) {\r\n        this.ctx.beginPath();\r\n        for (const tile of tiles) {\r\n            this.ctx.rect(tile.x, tile.y, 10, 10);\r\n        }\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.fill();\r\n    }\r\n}","import { InputHistory } from './SnakePlayer';\r\nimport { SnakeGame, Level, Direction, DIRECTIONS } from './SnakeGame';\r\n\r\nexport function SnakeScoreCalculator(playId: string, level: Level, inputHistory: InputHistory) {\r\n    const game = new SnakeGame(playId, level, 1);\r\n    const agent = game.snakeAgents[0];\r\n    let tick = 0;\r\n    let gameover = false;\r\n    while(!gameover) {\r\n        const input: Direction | null = (inputHistory.UP.indexOf(tick) >= 0) ? 'UP'\r\n            : (inputHistory.DOWN.indexOf(tick) >= 0) ? 'DOWN'\r\n            : (inputHistory.LEFT.indexOf(tick) >= 0) ? 'LEFT'\r\n            : (inputHistory.RIGHT.indexOf(tick) >= 0) ? 'RIGHT' : null;\r\n        \r\n        if (input) agent.setDirection(DIRECTIONS[input]);\r\n        gameover = !agent.tick();\r\n        tick++;\r\n    }\r\n    return agent.getScore();\r\n}","module.exports = require(\"express\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"seed-random\");"],"sourceRoot":""}